[
    {
        "label": "nan",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask ",
        "description": "flask ",
        "isExtraImport": true,
        "detail": "flask ",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask ",
        "description": "flask ",
        "isExtraImport": true,
        "detail": "flask ",
        "documentation": {}
    },
    {
        "label": "jsonify;",
        "importPath": "flask ",
        "description": "flask ",
        "isExtraImport": true,
        "detail": "flask ",
        "documentation": {}
    },
    {
        "label": "selenium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "selenium",
        "description": "selenium",
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "initiate_db",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def initiate_db():\n        #     1. Create a  table attribute dataset and dress dataset \n    mys_cur.execute(\"CREATE DATABASE IF NOT EXISTS dress;\")\n    mys_cur.execute(f\"\"\"\nCREATE TABLE IF NOT EXISTS dress.attributes(\n        `CRA` INT NOT NULL,\n        `Style` VARCHAR(30),\n        `Price` VARCHAR(30),\n        `Rating` DOUBLE,\n        `Size` VARCHAR(30),",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "close_conn",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def close_conn():\n    mongo.close()\n    mys_cur.close()\n    mysql.close()\ndef bulk_load():\n        #     2. Do a bulk load for these two table for respective dataset \n    import datetime\n    sales=pd.read_excel('pandas\\data fsds\\Dress Sales.xlsx',index_col=0)\n    attributes=pd.read_excel('pandas\\data fsds\\Attribute DataSet.xlsx')\n    attributes=attributes.to_dict(orient='split')",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "bulk_load",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def bulk_load():\n        #     2. Do a bulk load for these two table for respective dataset \n    import datetime\n    sales=pd.read_excel('pandas\\data fsds\\Dress Sales.xlsx',index_col=0)\n    attributes=pd.read_excel('pandas\\data fsds\\Attribute DataSet.xlsx')\n    attributes=attributes.to_dict(orient='split')\n    struct=str(attributes['columns']).replace(r\"'\",'').replace('[','').replace(']','')\n    sqlattrstr=f\"REPLACE INTO dress.attributes VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\"\n    n=[]\n    for i in attributes['data']:",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "bulk_read",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def bulk_read():\n    #     3. read these dataset in pandas as a dataframe \n   mys_cur.execute(f'SELECT * FROM {db_name}.attributes;')\n   attr=mys_cur.fetchall()\n   attr=pd.DataFrame(attr,columns=['CRA','Style' ,'Price' , 'Rating','Size' ,'Season' ,'NeckLine' ,'SleeveLength' ,'waiseline' ,'Material' ,'FabricType' ,'Decoration' ,'Pattern Type', 'Recommendation'])\n   mys_cur.execute(f'SELECT * FROM {db_name}.sales;')\n   sale=pd.DataFrame(mys_cur.fetchall(),index=None,columns=['Dress_ID','Date','Sale'])\n   return attr,sale  \n# initiate_db()\n# bulk_load()",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "to_mongo",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def to_mongo(sales=(s.to_dict(orient='records')),attr=a.to_dict(orient='records')):\n    for i in range(len(sales)): \n       sales[i]['Date']=pd.to_datetime(sales[i]['Date'])\n    mongo['dress']['sales'].insert_many(sales)\n    mongo['dress']['attributes'].insert_many(attr)\n# to_mongo()    # Done\n# print([i for i in mongo['dress']['sales'].find()])       # Test\n#     6. in sql task try to perform left join operation with attrubute dataset and dress dataset on column Dress_ID\ndef leftjoinSQL():\n    mys_cur.execute('''",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "leftjoinSQL",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def leftjoinSQL():\n    mys_cur.execute('''\n                        SELECT * FROM dress.attributes\n                        LEFT JOIN dress.sales on dress.attributes.CRA = dress.sales.Dress_ID\n                        ;\n                    ''')\n    print(mys_cur.fetchall())\n# leftjoinSQL()\n#     7. Write a sql query to find out how many unique dress that we have based on dress id \ndef getnoofUniqueDressID():",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "getnoofUniqueDressID",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def getnoofUniqueDressID():\n    mys_cur.execute(\"SELECT COUNT(DISTINCT(Dress_ID)) FROM dress.sales;\")\n    return mys_cur.fetchall()[0][0]\n# print(getnoofUniqueDressID())\n# 8. Try to find out how mnay dress is having recommendation 0 \ndef rec0dresscount():\n    mys_cur.execute(r'''SELECT COUNT(DISTINCT(CRA)) FROM dress.attributes\n                        WHERE`attributes`.`Recommendation`=0;''')\n    return mys_cur.fetchall()[0][0]\n# print(rec0dresscount())",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "rec0dresscount",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def rec0dresscount():\n    mys_cur.execute(r'''SELECT COUNT(DISTINCT(CRA)) FROM dress.attributes\n                        WHERE`attributes`.`Recommendation`=0;''')\n    return mys_cur.fetchall()[0][0]\n# print(rec0dresscount())\n# 9 Try to find out total dress sell for individual dress id\ndef gettotalsales():\n    mys_cur.execute('''SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales GROUP BY Dress_ID;''')\n    return mys_cur.fetchall()\n# print(gettotalsales())",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "gettotalsales",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def gettotalsales():\n    mys_cur.execute('''SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales GROUP BY Dress_ID;''')\n    return mys_cur.fetchall()\n# print(gettotalsales())\n#     10. Try to find out a third highest most selling dress id \ndef HighestSales3rd():\n    mys_cur.execute(\"\"\"SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales\n                        GROUP BY Dress_ID\n                        ORDER BY 2 DESC \n                        LIMIT 1 OFFSET 2\"\"\")",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "HighestSales3rd",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def HighestSales3rd():\n    mys_cur.execute(\"\"\"SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales\n                        GROUP BY Dress_ID\n                        ORDER BY 2 DESC \n                        LIMIT 1 OFFSET 2\"\"\")\n    return mys_cur.fetchall()\n# print(HighestSales3rd())\nclose_conn()",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "Conditionals.serve",
        "description": "Conditionals.serve",
        "peekOfCode": "def test1():\n    if (request.method=='POST'):\n        a= request.json['num1']\n        b= request.json['num2']\n        result= a/b;\n        return jsonify((str(result)))\n# Write a program to insert a record in sql table via api \nif __name__== '__main__':\n    app.run()",
        "detail": "Conditionals.serve",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Conditionals.serve",
        "description": "Conditionals.serve",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/test',methods=['GET','POST'])\ndef test1():\n    if (request.method=='POST'):\n        a= request.json['num1']\n        b= request.json['num2']\n        result= a/b;\n        return jsonify((str(result)))\n# Write a program to insert a record in sql table via api \nif __name__== '__main__':",
        "detail": "Conditionals.serve",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "loops.question1",
        "description": "loops.question1",
        "peekOfCode": "r = int(input(\"enter the number of lines: \"))\nj=1\nresult=\"\"\nfor i in range(r):\n    print(( ' ' * (l*2) )  *  (r-1-i), end='')\n    print((text+(' '*l))*j)\n    j+=2\nprint(result)",
        "detail": "loops.question1",
        "documentation": {}
    },
    {
        "label": "print_hi",
        "kind": 2,
        "importPath": "mongo.mongodb.main",
        "description": "mongo.mongodb.main",
        "peekOfCode": "def print_hi(name):\n    # Use a breakpoint in the code line below to debug your script.\n    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    print_hi('PyCharm')\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/",
        "detail": "mongo.mongodb.main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://ineuron:ineuron1@cluster0.goi2j.mongodb.net/?retryWrites=true&w=majority\")\ndb = client.test\ndata = {\n    \"name\" : \"sudhanshu\",\n    \"mail_id\" : \"sudhanshu@ineuron.ai\",\n    \"subject\" : [\"data scinece\" , \"big data \" , \"data analytics \"]\n}\nlist_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "db = client.test\ndata = {\n    \"name\" : \"sudhanshu\",\n    \"mail_id\" : \"sudhanshu@ineuron.ai\",\n    \"subject\" : [\"data scinece\" , \"big data \" , \"data analytics \"]\n}\nlist_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Machine Learning with Deployment'},",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "data = {\n    \"name\" : \"sudhanshu\",\n    \"mail_id\" : \"sudhanshu@ineuron.ai\",\n    \"subject\" : [\"data scinece\" , \"big data \" , \"data analytics \"]\n}\nlist_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Machine Learning with Deployment'},\n    {'companyName': 'iNeuron',",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "list_of_records",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "list_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Machine Learning with Deployment'},\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Deep Learning for NLP and Computer vision'},\n    {'companyName': 'iNeuron',\n     'product': 'Master Program',\n     'courseOffered': 'Data Science Masters Program'}",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "database = client['myinfo']\ncollection = database[\"sudh\"]\n##collection.insert_one(data)\ncollection.insert_many(list_of_records)\ncollection1 = database[\"dpkt\"]\ndata1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "collection = database[\"sudh\"]\n##collection.insert_one(data)\ncollection.insert_many(list_of_records)\ncollection1 = database[\"dpkt\"]\ndata1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "collection1",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "collection1 = database[\"dpkt\"]\ndata1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "data1",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "data1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "record",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "record = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "data =  [\n        {\n            \"item\": \"canvas\",\n            \"qty\": 100,\n            \"size\": {\"h\": 28, \"w\": 35.5, \"uom\": \"cm\"},\n            \"status\": \"A\",\n        },\n        {\n            \"item\": \"journal\",\n            \"qty\": 25,",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://ineuron:ineuron1@cluster0.goi2j.mongodb.net/?retryWrites=true&w=majority\")\ndb = client.test\ndatabase = client['inventory']\ncollection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "db = client.test\ndatabase = client['inventory']\ncollection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "database = client['inventory']\ncollection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "collection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "d = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://ineuron:ineuron1@cluster0.goi2j.mongodb.net/?retryWrites=true&w=majority\")\ndb = client.test\ndatabase = client['myinfo']\ncollection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "db = client.test\ndatabase = client['myinfo']\ncollection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "database = client['myinfo']\ncollection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "collection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "data = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api, win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise\n            if silent:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.util, importlib.machinery\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,\n    )",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api, win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):\n        this_dest = this_pyd + \".old\"",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:\n        failures.append(script)\ndef find_and_run(possible_locations, extras):",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "isHappy",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def isHappy(num,b:list=[]):\n    digsq=0\n    for i in range(len(str(num))):\n        digsq += int( str(num)[i] )  ** (2)\n    if digsq==1:\n        b=num=digsq=None\n        b=[]\n        del b\n        del num\n        del digsq",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "prints",
        "kind": 2,
        "importPath": "test2",
        "description": "test2",
        "peekOfCode": "def prints():\n    count+=10\n    print(count)\nprints()\nlist",
        "detail": "test2",
        "documentation": {}
    }
]