[
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "imagehash",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imagehash",
        "description": "imagehash",
        "detail": "imagehash",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "bipartite",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "approximation",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.approximation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.approximation",
        "description": "networkx.algorithms.approximation",
        "detail": "networkx.algorithms.approximation",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "nan",
        "importPath": "cmath",
        "description": "cmath",
        "isExtraImport": true,
        "detail": "cmath",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask ",
        "description": "flask ",
        "isExtraImport": true,
        "detail": "flask ",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask ",
        "description": "flask ",
        "isExtraImport": true,
        "detail": "flask ",
        "documentation": {}
    },
    {
        "label": "jsonify;",
        "importPath": "flask ",
        "description": "flask ",
        "isExtraImport": true,
        "detail": "flask ",
        "documentation": {}
    },
    {
        "label": "selenium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "selenium",
        "description": "selenium",
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "find_similar_images",
        "kind": 2,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "def find_similar_images(userpaths, hashfunc=imagehash.average_hash):\n\tdef is_image(filename):\n\t\tf = filename.lower()\n\t\treturn f.endswith('.png') or f.endswith('.jpg') or \\\n\t\t\tf.endswith('.jpeg') or f.endswith('.bmp') or \\\n\t\t\tf.endswith('.gif') or '.jpg' in f or f.endswith('.svg')\n\timage_filenames = []\n\tfor userpath in userpaths:\n\t\timage_filenames += [os.path.join(userpath, path) for path in os.listdir(userpath) if is_image(path)]\n\timages = {}",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\tf = filename.lower()\n\t\treturn f.endswith('.png') or f.endswith('.jpg') or \\\n\t\t\tf.endswith('.jpeg') or f.endswith('.bmp') or \\\n\t\t\tf.endswith('.gif') or '.jpg' in f or f.endswith('.svg')\n\timage_filenames = []\n\tfor userpath in userpaths:\n\t\timage_filenames += [os.path.join(userpath, path) for path in os.listdir(userpath) if is_image(path)]\n\timages = {}\n\tfor img in sorted(image_filenames):\n\t\ttry:",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\timage_filenames",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\timage_filenames = []\n\tfor userpath in userpaths:\n\t\timage_filenames += [os.path.join(userpath, path) for path in os.listdir(userpath) if is_image(path)]\n\timages = {}\n\tfor img in sorted(image_filenames):\n\t\ttry:\n\t\t\thash = hashfunc(Image.open(img))\n\t\texcept Exception as e:\n\t\t\tprint('Problem:', e, 'with', img)\n\t\t\tcontinue",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\timages",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\timages = {}\n\tfor img in sorted(image_filenames):\n\t\ttry:\n\t\t\thash = hashfunc(Image.open(img))\n\t\texcept Exception as e:\n\t\t\tprint('Problem:', e, 'with', img)\n\t\t\tcontinue\n\t\tif hash in images:\n\t\t\tprint(img, '  already exists as', ' '.join(images[hash]))\n\t\t\tif 'dupPictures' in img:",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\t\thash",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\t\thash = hashfunc(Image.open(img))\n\t\texcept Exception as e:\n\t\t\tprint('Problem:', e, 'with', img)\n\t\t\tcontinue\n\t\tif hash in images:\n\t\t\tprint(img, '  already exists as', ' '.join(images[hash]))\n\t\t\tif 'dupPictures' in img:\n\t\t\t\tprint('rm -v', img)\n\t\timages[hash] = images.get(hash, []) + [img]\n\t# for k, img_list in six.iteritems(images):",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\timages[hash]",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\timages[hash] = images.get(hash, []) + [img]\n\t# for k, img_list in six.iteritems(images):\n\t# \tif len(img_list) > 1:\n\t# \t\tprint(\" \".join(img_list))\nif __name__ == '__main__':  # noqa: C901\n\timport os\n\timport sys\n\tdef usage():\n\t\tsys.stderr.write(\"\"\"SYNOPSIS: %s [ahash|phash|dhash|...] [<directory>]\nIdentifies similar images in the directory.",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\thashmethod",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\thashmethod = sys.argv[1] if len(sys.argv) > 1 else usage()\n\tif hashmethod == 'ahash':\n\t\thashfunc = imagehash.average_hash\n\telif hashmethod == 'phash':\n\t\thashfunc = imagehash.phash\n\telif hashmethod == 'dhash':\n\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.average_hash\n\telif hashmethod == 'phash':\n\t\thashfunc = imagehash.phash\n\telif hashmethod == 'dhash':\n\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.phash\n\telif hashmethod == 'dhash':\n\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')\n\telif hashmethod == 'colorhash':\n\t\thashfunc = imagehash.colorhash",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.dhash\n\telif hashmethod == 'whash-haar':\n\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')\n\telif hashmethod == 'colorhash':\n\t\thashfunc = imagehash.colorhash\n\telif hashmethod == 'crop-resistant':\n\t\thashfunc = imagehash.crop_resistant_hash",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.whash\n\telif hashmethod == 'whash-db4':\n\t\tdef hashfunc(img):\n\t\t\treturn imagehash.whash(img, mode='db4')\n\telif hashmethod == 'colorhash':\n\t\thashfunc = imagehash.colorhash\n\telif hashmethod == 'crop-resistant':\n\t\thashfunc = imagehash.crop_resistant_hash\n\telse:\n\t\tusage()",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.colorhash\n\telif hashmethod == 'crop-resistant':\n\t\thashfunc = imagehash.crop_resistant_hash\n\telse:\n\t\tusage()\n\tuserpaths = sys.argv[2:] if len(sys.argv) > 2 else '.'\n\tfind_similar_images(userpaths=userpaths, hashfunc=hashfunc)",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\t\thashfunc",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\t\thashfunc = imagehash.crop_resistant_hash\n\telse:\n\t\tusage()\n\tuserpaths = sys.argv[2:] if len(sys.argv) > 2 else '.'\n\tfind_similar_images(userpaths=userpaths, hashfunc=hashfunc)",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "\tuserpaths",
        "kind": 5,
        "importPath": ".venv.Scripts.find_similar_images",
        "description": ".venv.Scripts.find_similar_images",
        "peekOfCode": "\tuserpaths = sys.argv[2:] if len(sys.argv) > 2 else '.'\n\tfind_similar_images(userpaths=userpaths, hashfunc=hashfunc)",
        "detail": ".venv.Scripts.find_similar_images",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_postinstall",
        "description": ".venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": ".venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": ".venv.Scripts.pywin32_testall",
        "description": ".venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": ".venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\"}\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "create_community_node_colors",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])\n    colors = [\"#D4FCB1\", \"#CDC5FC\", \"#FFC2C4\", \"#F2D140\", \"#BCC6C8\"][:number_of_colors]\n    node_colors = []\n    for node in graph:\n        current_community_index = 0\n        for community in communities:\n            if node in community:\n                node_colors.append(colors[current_community_index])\n                break",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "visualize_communities",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def visualize_communities(graph, communities, i):\n    node_colors = create_community_node_colors(graph, communities)\n    modularity = round(nx.community.modularity(graph, communities), 6)\n    title = f\"Community Visualization of {len(communities)} communities with modularity of {modularity}\"\n    pos = nx.spring_layout(graph, k=0.3, iterations=50, seed=2)\n    plt.subplot(3, 1, i)\n    plt.title(title)\n    nx.draw(\n        graph,\n        pos=pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "G = nx.karate_club_graph()\ncommunities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "communities",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "communities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "modularity_df",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "modularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list\ndef create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "G = nx.Graph(\n    [\n        (1, 2),\n        (7, 2),\n        (3, 9),\n        (3, 2),\n        (7, 6),\n        (5, 2),\n        (1, 5),\n        (2, 8),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "I = approx.maximum_independent_set(G)\nprint(f\"Maximum independent set of G: {I}\")\npos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "pos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": {\"color\": \"Red\"},\n    \"B\": {\"color\": \"Red\"},\n    \"C\": {\"color\": \"Red\"},\n    \"D\": {\"color\": \"Red\"},\n    \"E\": {\"color\": \"Blue\"},\n    \"F\": {\"color\": \"Blue\"},\n    \"G\": {\"color\": \"Blue\"},\n    \"H\": {\"color\": \"Blue\"},\n    \"I\": {\"color\": \"Yellow\"},",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "G = nx.path_graph(20)  # An example graph\ncenter_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "center_node",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "center_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "edge_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "edge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos[center_node]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for i, layer in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor u, v, d in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "G = nx.DiGraph(\n    [\n        (\"f\", \"a\"),\n        (\"a\", \"b\"),\n        (\"a\", \"e\"),\n        (\"b\", \"c\"),\n        (\"b\", \"d\"),\n        (\"d\", \"e\"),\n        (\"f\", \"c\"),\n        (\"f\", \"g\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nfig, ax = plt.subplots()\nnx.draw_networkx(G, pos=pos, ax=ax)\nax.set_title(\"DAG layout in topological order\")\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "G = nx.Graph()\nG.add_edges_from(\n    [\n        (0, 1, {\"weight\": 4}),\n        (0, 7, {\"weight\": 8}),\n        (1, 7, {\"weight\": 11}),\n        (1, 2, {\"weight\": 8}),\n        (2, 8, {\"weight\": 2}),\n        (2, 5, {\"weight\": 4}),\n        (2, 3, {\"weight\": 7}),",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "T = nx.minimum_spanning_tree(G)\n# Visualize the graph and the minimum spanning tree\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "pos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "triads",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "peekOfCode": "triads = {\n    \"003\": [],\n    \"012\": [(1, 2)],\n    \"102\": [(1, 2), (2, 1)],\n    \"021D\": [(3, 1), (3, 2)],\n    \"021U\": [(1, 3), (2, 3)],\n    \"021C\": [(1, 3), (3, 2)],\n    \"111D\": [(1, 2), (2, 1), (3, 1)],\n    \"111U\": [(1, 2), (2, 1), (1, 3)],\n    \"030T\": [(1, 2), (3, 2), (1, 3)],",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor source, target in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "initiate_db",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def initiate_db():\n        #     1. Create a  table attribute dataset and dress dataset \n    mys_cur.execute(\"CREATE DATABASE IF NOT EXISTS dress;\")\n    mys_cur.execute(f\"\"\"\nCREATE TABLE IF NOT EXISTS dress.attributes(\n        `CRA` INT NOT NULL,\n        `Style` VARCHAR(30),\n        `Price` VARCHAR(30),\n        `Rating` DOUBLE,\n        `Size` VARCHAR(30),",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "close_conn",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def close_conn():\n    mongo.close()\n    mys_cur.close()\n    mysql.close()\ndef bulk_load():\n        #     2. Do a bulk load for these two table for respective dataset \n    import datetime\n    sales=pd.read_excel('pandas\\data fsds\\Dress Sales.xlsx',index_col=0)\n    attributes=pd.read_excel('pandas\\data fsds\\Attribute DataSet.xlsx')\n    attributes=attributes.to_dict(orient='split')",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "bulk_load",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def bulk_load():\n        #     2. Do a bulk load for these two table for respective dataset \n    import datetime\n    sales=pd.read_excel('pandas\\data fsds\\Dress Sales.xlsx',index_col=0)\n    attributes=pd.read_excel('pandas\\data fsds\\Attribute DataSet.xlsx')\n    attributes=attributes.to_dict(orient='split')\n    struct=str(attributes['columns']).replace(r\"'\",'').replace('[','').replace(']','')\n    sqlattrstr=f\"REPLACE INTO dress.attributes VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\"\n    n=[]\n    for i in attributes['data']:",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "bulk_read",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def bulk_read():\n    #     3. read these dataset in pandas as a dataframe \n   mys_cur.execute(f'SELECT * FROM {db_name}.attributes;')\n   attr=mys_cur.fetchall()\n   attr=pd.DataFrame(attr,columns=['CRA','Style' ,'Price' , 'Rating','Size' ,'Season' ,'NeckLine' ,'SleeveLength' ,'waiseline' ,'Material' ,'FabricType' ,'Decoration' ,'Pattern Type', 'Recommendation'])\n   mys_cur.execute(f'SELECT * FROM {db_name}.sales;')\n   sale=pd.DataFrame(mys_cur.fetchall(),index=None,columns=['Dress_ID','Date','Sale'])\n   return attr,sale  \n# initiate_db()\n# bulk_load()",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "to_mongo",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def to_mongo(sales=(s.to_dict(orient='records')),attr=a.to_dict(orient='records')):\n    for i in range(len(sales)): \n       sales[i]['Date']=pd.to_datetime(sales[i]['Date'])\n    mongo['dress']['sales'].insert_many(sales)\n    mongo['dress']['attributes'].insert_many(attr)\n# to_mongo()    # Done\n# print([i for i in mongo['dress']['sales'].find()])       # Test\n#     6. in sql task try to perform left join operation with attrubute dataset and dress dataset on column Dress_ID\ndef leftjoinSQL():\n    mys_cur.execute('''",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "leftjoinSQL",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def leftjoinSQL():\n    mys_cur.execute('''\n                        SELECT * FROM dress.attributes\n                        LEFT JOIN dress.sales on dress.attributes.CRA = dress.sales.Dress_ID\n                        ;\n                    ''')\n    print(mys_cur.fetchall())\n# leftjoinSQL()\n#     7. Write a sql query to find out how many unique dress that we have based on dress id \ndef getnoofUniqueDressID():",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "getnoofUniqueDressID",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def getnoofUniqueDressID():\n    mys_cur.execute(\"SELECT COUNT(DISTINCT(Dress_ID)) FROM dress.sales;\")\n    return mys_cur.fetchall()[0][0]\n# print(getnoofUniqueDressID())\n# 8. Try to find out how mnay dress is having recommendation 0 \ndef rec0dresscount():\n    mys_cur.execute(r'''SELECT COUNT(DISTINCT(CRA)) FROM dress.attributes\n                        WHERE`attributes`.`Recommendation`=0;''')\n    return mys_cur.fetchall()[0][0]\n# print(rec0dresscount())",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "rec0dresscount",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def rec0dresscount():\n    mys_cur.execute(r'''SELECT COUNT(DISTINCT(CRA)) FROM dress.attributes\n                        WHERE`attributes`.`Recommendation`=0;''')\n    return mys_cur.fetchall()[0][0]\n# print(rec0dresscount())\n# 9 Try to find out total dress sell for individual dress id\ndef gettotalsales():\n    mys_cur.execute('''SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales GROUP BY Dress_ID;''')\n    return mys_cur.fetchall()\n# print(gettotalsales())",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "gettotalsales",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def gettotalsales():\n    mys_cur.execute('''SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales GROUP BY Dress_ID;''')\n    return mys_cur.fetchall()\n# print(gettotalsales())\n#     10. Try to find out a third highest most selling dress id \ndef HighestSales3rd():\n    mys_cur.execute(\"\"\"SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales\n                        GROUP BY Dress_ID\n                        ORDER BY 2 DESC \n                        LIMIT 1 OFFSET 2\"\"\")",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "HighestSales3rd",
        "kind": 2,
        "importPath": "assignments.pdsqlmongoassignment",
        "description": "assignments.pdsqlmongoassignment",
        "peekOfCode": "def HighestSales3rd():\n    mys_cur.execute(\"\"\"SELECT Dress_ID,SUM(Sales) AS `Total sales` FROM dress.sales\n                        GROUP BY Dress_ID\n                        ORDER BY 2 DESC \n                        LIMIT 1 OFFSET 2\"\"\")\n    return mys_cur.fetchall()\n# print(HighestSales3rd())\nclose_conn()",
        "detail": "assignments.pdsqlmongoassignment",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "Conditionals.serve",
        "description": "Conditionals.serve",
        "peekOfCode": "def test1():\n    if (request.method=='POST'):\n        a= request.json['num1']\n        b= request.json['num2']\n        result= a/b;\n        return jsonify((str(result)))\n# Write a program to insert a record in sql table via api \nif __name__== '__main__':\n    app.run()",
        "detail": "Conditionals.serve",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Conditionals.serve",
        "description": "Conditionals.serve",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/test',methods=['GET','POST'])\ndef test1():\n    if (request.method=='POST'):\n        a= request.json['num1']\n        b= request.json['num2']\n        result= a/b;\n        return jsonify((str(result)))\n# Write a program to insert a record in sql table via api \nif __name__== '__main__':",
        "detail": "Conditionals.serve",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "loops.question1",
        "description": "loops.question1",
        "peekOfCode": "r = int(input(\"enter the number of lines: \"))\nj=1\nresult=\"\"\nfor i in range(r):\n    print(( ' ' * (l*2) )  *  (r-1-i), end='')\n    print((text+(' '*l))*j)\n    j+=2\nprint(result)",
        "detail": "loops.question1",
        "documentation": {}
    },
    {
        "label": "print_hi",
        "kind": 2,
        "importPath": "mongo.mongodb.main",
        "description": "mongo.mongodb.main",
        "peekOfCode": "def print_hi(name):\n    # Use a breakpoint in the code line below to debug your script.\n    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    print_hi('PyCharm')\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/",
        "detail": "mongo.mongodb.main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://ineuron:ineuron1@cluster0.goi2j.mongodb.net/?retryWrites=true&w=majority\")\ndb = client.test\ndata = {\n    \"name\" : \"sudhanshu\",\n    \"mail_id\" : \"sudhanshu@ineuron.ai\",\n    \"subject\" : [\"data scinece\" , \"big data \" , \"data analytics \"]\n}\nlist_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "db = client.test\ndata = {\n    \"name\" : \"sudhanshu\",\n    \"mail_id\" : \"sudhanshu@ineuron.ai\",\n    \"subject\" : [\"data scinece\" , \"big data \" , \"data analytics \"]\n}\nlist_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Machine Learning with Deployment'},",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "data = {\n    \"name\" : \"sudhanshu\",\n    \"mail_id\" : \"sudhanshu@ineuron.ai\",\n    \"subject\" : [\"data scinece\" , \"big data \" , \"data analytics \"]\n}\nlist_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Machine Learning with Deployment'},\n    {'companyName': 'iNeuron',",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "list_of_records",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "list_of_records = [\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Machine Learning with Deployment'},\n    {'companyName': 'iNeuron',\n     'product': 'Affordable AI',\n     'courseOffered': 'Deep Learning for NLP and Computer vision'},\n    {'companyName': 'iNeuron',\n     'product': 'Master Program',\n     'courseOffered': 'Data Science Masters Program'}",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "database = client['myinfo']\ncollection = database[\"sudh\"]\n##collection.insert_one(data)\ncollection.insert_many(list_of_records)\ncollection1 = database[\"dpkt\"]\ndata1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "collection = database[\"sudh\"]\n##collection.insert_one(data)\ncollection.insert_many(list_of_records)\ncollection1 = database[\"dpkt\"]\ndata1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "collection1",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "collection1 = database[\"dpkt\"]\ndata1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "data1",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "data1 = {\"packetType\":\"D\",\"data\":{\"checkEngineLightFlag\":\"F\",\"batteryVoltageStableTime\":0,\"batteryVoltageStable\":\"0\",\"batteryVoltageOff\":\"12.42\",\"batteryCrankParamTN\":\"-0.08\",\"batteryCrankParamVN\":\"0.00\",\"batteryCrankParamTP\":\"-0.08\",\"batteryCrankParamVP\":\"0.00\",\"batteryCrankParamTT\":\"-0.00008\",\"batteryCrankParamV0\":\"0.00\",\"batteryVoltageMaxOn\":\"13.05\",\"batteryVoltageMinOn\":\"12.97\",\"batteryVoltageMaxOff\":\"12.46\",\"batteryVoltageMinOff\":\"12.36\",\"batteryVoltageOnAverage\":\"13.02\",\"engineLoadMax\":\"84\",\"engineLoadAverage\":\"39.98\",\"rpmMax\":\"3487\",\"rpmAverage\":\"1431.29\",\"gpsSpeedAverage\":\"21.99\",\"vssMax\":\"53.44\",\"vssAverage\":\"23.06\",\"tcuTemperatureMin\":\"82.40\",\"tcuTemperatureMax\":\"109.40\",\"tcuTemperatureAverage\":\"104.87\",\"coolantMin\":\"158.00\",\"coolantMax\":\"188.60\",\"coolantAverage\":\"180.20\",\"packetStartLocal\":1508143346000,\"tripStartLocal\":1508143346000,\"milIndicator\":\"F\",\"monitorsNotReady\":0,\"imei\":\"60DF5417\",\"gatewayTs\":1515613306592,\"diagnosticTroubleCodeData\":[345345],\"diagnosticPidData\":[[64768,47,100],[64768,1,517376],[64800,1,262144],[64768,5,125]]},\"header\":{\"iwrapVer\":\"1.9.20\",\"sourceSystem\":\"CDP\",\"configVer\":\"1.1\",\"oemName\":\"HUM\",\"unitType\":0,\"cpVer\":\"7.50.1.9\",\"igpsVer\":\"1.3.7\",\"messageType\":\"Notification\",\"pomVer\":\"1.0\",\"headerVer\":\"V6\",\"timestamp\":0,\"deviceType\":\"InDrive\",\"visorVer\":\"1.4.35\",\"transactionId\":\"53098471-7787-4160-94b3-cd69dcc70416\",\"deviceSerialNo\":\"60DF5417\",\"subOrganization\":\"HUM\",\"organization\":\"HUM\",\"imei\":\"60DF5417\",\"operation\":\"Notification\"}}\ncollection1.insert_one(data1)\nrecord = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "record",
        "kind": 5,
        "importPath": "mongo.mongodb.test",
        "description": "mongo.mongodb.test",
        "peekOfCode": "record = collection.find()",
        "detail": "mongo.mongodb.test",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "data =  [\n        {\n            \"item\": \"canvas\",\n            \"qty\": 100,\n            \"size\": {\"h\": 28, \"w\": 35.5, \"uom\": \"cm\"},\n            \"status\": \"A\",\n        },\n        {\n            \"item\": \"journal\",\n            \"qty\": 25,",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://ineuron:ineuron1@cluster0.goi2j.mongodb.net/?retryWrites=true&w=majority\")\ndb = client.test\ndatabase = client['inventory']\ncollection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "db = client.test\ndatabase = client['inventory']\ncollection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "database = client['inventory']\ncollection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "collection = database[\"table\"]\n#collection.insert_many(data)\n#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'status':'A'})\n#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'status':{'$in':['A' , 'P']}})\n#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'status':{\"$gt\" : \"C\"}})\n#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'qty':{'$gte' :75}})\n#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'item': 'sketch pad','qty': 95})\n#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({ 'item': 'sketch pad' , 'qty' :{\"$gte\" : 75}})\n#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "#d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "#d = collection.find({'$or' : [{ 'item': 'sketch pad'} , {'qty': {\"$gte\": 75}}]})\n#collection.update_one({'item': 'canvas'} , {'$set':{'item': 'sudhanshu'} })\ncollection.delete_one({'item': 'sudhanshu'})\nd = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "mongo.mongodb.test3",
        "description": "mongo.mongodb.test3",
        "peekOfCode": "d = collection.find({'item': 'sudhanshu'})\nfor i in d :\n    print(i)",
        "detail": "mongo.mongodb.test3",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://ineuron:ineuron1@cluster0.goi2j.mongodb.net/?retryWrites=true&w=majority\")\ndb = client.test\ndatabase = client['myinfo']\ncollection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "db = client.test\ndatabase = client['myinfo']\ncollection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "database = client['myinfo']\ncollection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "collection = database[\"sudh\"]\n#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "#data",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "#data = collection.find({\"companyName\" : \"iNeuron\"})\ndata = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "mongo.mongodb.tset1",
        "description": "mongo.mongodb.tset1",
        "peekOfCode": "data = collection.find({\"courseOffered\" :{\"$gt\" :\"E\"}})\nfor i in data :\n    print(i)",
        "detail": "mongo.mongodb.tset1",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api, win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise\n            if silent:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.util, importlib.machinery\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,\n    )",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api, win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):\n        this_dest = this_pyd + \".old\"",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_postinstall",
        "description": "mysql.mysql.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "mysql.mysql.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:\n        failures.append(script)\ndef find_and_run(possible_locations, extras):",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "mysql.mysql.Scripts.pywin32_testall",
        "description": "mysql.mysql.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))",
        "detail": "mysql.mysql.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "isHappy",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def isHappy(num,b:list=[]):\n    digsq=0\n    for i in range(len(str(num))):\n        digsq += int( str(num)[i] )  ** (2)\n    if digsq==1:\n        b=num=digsq=None\n        b=[]\n        del b\n        del num\n        del digsq",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "prints",
        "kind": 2,
        "importPath": "test2",
        "description": "test2",
        "peekOfCode": "def prints():\n    count+=10\n    print(count)\nprints()\nlist",
        "detail": "test2",
        "documentation": {}
    }
]